#! /bin/bash
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
source "$SCRIPT_DIR/.env" || { echo "Failed to load .env" && exit 99; };
source "$SCRIPT_DIR/logging.sh" || { echo "Failed to load logging.sh"; exit 1; };

set -o nounset

if [ -z "${QK_NUM-}" ]; then
  if [ $# -gt 0 ]; then
    QK_NUM="$1"
  else
    QK_NUM="$(zenity --entry --text "Serial number for label")"
  fi
fi

if [ -z "${QK_NUM-}" ]; then
  logThis "No serial number supplied" "ERROR"
  exit 1;
fi

if [ -z "${QK_TEXT-}" ]; then
  if [ $# -gt 1 ]; then
    QK_TEXT="$2"
  else
    QK_TEXT="$(zenity --entry --text "Text for label")"
  fi
fi

if [ -z "${QK_TEXT-}" ]; then
  logThis "No text supplied" "ERROR"
  exit 1;
fi
logThis "NUM is '$QK_NUM'" "INFO"
logThis "TEXT is '$QK_TEXT'" "INFO"

BASE_LETTER=${QK_NUM:0:1}
NUM="${QK_NUM:2}"
STORAGE_DIR="$QK_ARCHIVE_BASE/$BASE_LETTER/$NUM/label"

logThis "Storage dir is $STORAGE_DIR" "INFO"


mkdir -p "$STORAGE_DIR"

trap ctrl_c INT
function ctrl_c() {
        echo "Cleaning up"
        rm -r "${STORAGE_DIR:?}/"* 2>/dev/null
        exit 0;
}

OUTPUTFILE="$STORAGE_DIR/${NUM}.png"
QRFILE="$STORAGE_DIR/${NUM}-qr.png"
NUMBERFILE="$STORAGE_DIR/${NUM}-number.png"

if [ -f "$OUTPUTFILE" ]; then
  logThis "File already exsists: $OUTPUTFILE" "ERROR"
  exit 1;
fi

qrencode --output="$QRFILE" --type=PNG --ignorecase -s 10 -m 0 "$QK_NUM";
logThis "QR-code: $QRFILE" "DEBUG"
convert -background white -fill black -size 210x50 -pointsize 45 -font "Ubuntu-Mono" -gravity center label:"$QK_NUM" -trim "$NUMBERFILE"
# Center the text on 210 pixels
convert "$NUMBERFILE" -gravity center -extent "$(identify -format "210x%[h]" "$NUMBERFILE")" "$NUMBERFILE"
logThis "Numberfile: $NUMBERFILE" "DEBUG"


TEXTFILE="$STORAGE_DIR/${NUM}-text.png"
WIDTH="$(echo "${#QK_TEXT}/6" | bc)"
WIDTH="$((WIDTH>30 ? WIDTH : 30))"
FS="$(echo "$QK_TEXT" | fold -s --width "$WIDTH")"
convert -background white -fill black -gravity Center -font "Ubuntu-Mono" -size 420x210  label:"${FS//$'\n'/\\n}" "$TEXTFILE"
logThis "Textfile: $TEXTFILE" "DEBUG"


QRTEXTFILE="$STORAGE_DIR/${NUM}-qr-text.png"
convert "$QRFILE" "$TEXTFILE" +append "$QRTEXTFILE"
logThis "QR-Textfile: $QRTEXTFILE" "DEBUG"
convert "$QRTEXTFILE" "$NUMBERFILE" -smush 5 "$OUTPUTFILE"
logThis "Output file is: $OUTPUTFILE" "INFO"

if ! command -v tiv &> /dev/null; then
  ristretto "$OUTPUTFILE" &
  echo "Close viewer to continue, CTRL-C to cancel"
  VIEWER_PID="$!"
  # Must sleep because it takes a second before we can find the window,
  # could in teory loop instead
  sleep 1
  # ristretto's title/name includes the filename
  VIEWER=$(xdotool search --onlyvisible --name "$(basename "$OUTPUTFILE")");
  # we must unmaximize (not minimize) before we move and resize
  wmctrl -ir "$VIEWER" -b remove,maximized_vert,maximized_horz
  xdotool windowmove "$VIEWER" 1920 550
  xdotool windowsize "$VIEWER" 1000 500
  if wait "$VIEWER_PID"; then
    logThis "Viewer closed, continuing" "DEBUG"
  else
    echo "manuel cleanup"
    ctrl_c
  fi
else
  tiv "$OUTPUTFILE"
  # Pipe input from /dev/tty so this can be used in a while loop (subshell)
  read -r -p "Enter to print, CTRL-C to cancel" < /dev/tty;
fi

brother_ql --model QL-810W --printer tcp://brother-ql-810w.intern.hild1.no print -l 62 "$OUTPUTFILE";
